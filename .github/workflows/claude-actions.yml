name: Claude Code Actions

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]

jobs:
  claude:
    # Only run if the comment contains @claude and is not from a bot
    if: |
      !endsWith(github.event.sender.login, '[bot]') && (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'issues' && contains(github.event.issue.body, '@claude'))
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read
      checks: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better context
          # For PR comments, checkout the PR branch
          ref: ${{ github.event.issue.pull_request && format('refs/pull/{0}/head', github.event.issue.number) || github.ref }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Gather Context
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            let contextInfo = {
              type: context.eventName,
              requestText: '',
              issueNumber: null,
              isPullRequest: false,
              prData: null,
              recentComments: []
            };
            
            // Extract the request text and context
            if (context.eventName === 'issues') {
              contextInfo.requestText = context.payload.issue.body || '';
              contextInfo.issueNumber = context.payload.issue.number;
              contextInfo.isPullRequest = !!context.payload.issue.pull_request;
            } else if (context.eventName === 'issue_comment') {
              contextInfo.requestText = context.payload.comment.body || '';
              contextInfo.issueNumber = context.payload.issue.number;
              contextInfo.isPullRequest = !!context.payload.issue.pull_request;
            } else if (context.eventName === 'pull_request_review_comment') {
              contextInfo.requestText = context.payload.comment.body || '';
              contextInfo.isPullRequest = true;
              contextInfo.issueNumber = context.payload.pull_request.number;
            }
            
            // If it's a PR, get PR details
            if (contextInfo.isPullRequest && contextInfo.issueNumber) {
              try {
                const pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: contextInfo.issueNumber
                });
                
                contextInfo.prData = {
                  title: pr.data.title,
                  body: pr.data.body,
                  state: pr.data.state,
                  head: pr.data.head.ref,
                  base: pr.data.base.ref,
                  files_changed: pr.data.changed_files,
                  additions: pr.data.additions,
                  deletions: pr.data.deletions
                };
                
                // Get recent PR comments for context
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: contextInfo.issueNumber,
                  per_page: 10
                });
                
                contextInfo.recentComments = comments.data.slice(-5).map(c => ({
                  author: c.user.login,
                  body: c.body.substring(0, 500)
                }));
              } catch (error) {
                console.log('Error fetching PR details:', error);
              }
            }
            
            // Get issue/PR labels
            try {
              const labels = await github.rest.issues.listLabelsOnIssue({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: contextInfo.issueNumber
              });
              contextInfo.labels = labels.data.map(l => l.name);
            } catch (error) {
              contextInfo.labels = [];
            }
            
            core.setOutput('context_json', JSON.stringify(contextInfo));
            core.setOutput('request_text', contextInfo.requestText);
            core.setOutput('is_pr', contextInfo.isPullRequest);
            core.setOutput('issue_number', contextInfo.issueNumber);

      - name: Add Processing Reaction
        uses: actions/github-script@v7
        with:
          script: |
            // Add a reaction to show we're processing
            if (context.eventName !== 'issues') {
              const commentId = context.payload.comment?.id;
              if (commentId) {
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentId,
                  content: 'rocket'
                });
              }
            }

      - name: Claude AI Analysis
        id: claude-analysis
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          track_progress: true
          
          prompt: |
            REPO: ${{ github.repository }}
            REQUEST TYPE: ${{ github.event_name }}
            ISSUE/PR NUMBER: ${{ steps.context.outputs.issue_number }}
            IS PULL REQUEST: ${{ steps.context.outputs.is_pr }}
            
            USER REQUEST:
            ${{ steps.context.outputs.request_text }}
            
            CONTEXT:
            ${{ steps.context.outputs.context_json }}
            
            You are responding to a @claude mention in a GitHub issue or PR comment for a Bun monorepo project.
            
            IMPORTANT PROJECT GUIDELINES:
            - Always use Bun commands (not npm/yarn/pnpm)
            - Follow kebab-case naming for files/directories
            - Use TypeScript with strict mode (no `any` types)
            - Keep files in appropriate packages (not root)
            - Use absolute imports for workspace packages (@workspace/*)
            - Use environment variables with bracket notation: process.env["VAR_NAME"]
            
            ANALYZE THE REQUEST AND PROVIDE:
            
            1. **Understanding**: Clearly restate what the user is asking for
            
            2. **Analysis**: Based on the request type, provide:
               - For bug reports: Potential causes and diagnostic steps
               - For feature requests: Implementation approach and considerations
               - For code questions: Explanation and best practices
               - For PR reviews: Code quality feedback and suggestions
               - For general help: Relevant documentation and examples
            
            3. **Actionable Response**: Provide specific, actionable guidance:
               - Code examples when appropriate
               - Commands to run for diagnostics
               - File locations to check
               - Configuration changes needed
               - Links to relevant documentation
            
            4. **Next Steps**: Clear recommendations for what to do next
            
            RESPONSE GUIDELINES:
            - Be concise but thorough
            - Use markdown formatting for clarity
            - Include code blocks with proper syntax highlighting
            - Reference specific files with paths when relevant
            - Suggest commands that can be run immediately
            - If the request requires code changes, provide specific examples
            
            For Pull Requests specifically:
            - Review the changes mentioned in the context
            - Check for adherence to project standards
            - Identify potential issues or improvements
            - Suggest specific code improvements with examples
            
            Remember: You're helping with a Bun-based TypeScript monorepo using Turborepo, Prisma, and Next.js.
          
          claude_args: |
            --allowed-tools "Read,Grep,Glob,Bash,WebSearch"

      - name: Post Claude Response
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.context.outputs.issue_number }};
            
            // Create a formatted response
            const response = `## ü§ñ Claude AI Response
            
            ${context.eventName === 'issues' ? 'Analyzing your issue...' : 'Responding to your request...'}
            
            ---
            
            _Claude has analyzed your request and provided guidance above._
            
            ### Quick Project Reminders:
            - üì¶ This is a Bun monorepo - use \`bun\` commands
            - üîß Run \`bun dev\` to start development
            - ‚úÖ Run \`bun typecheck\` to check types
            - üß™ Run \`bun test\` to run tests
            - üèóÔ∏è Run \`bun build\` to build all packages
            
            _Generated by Claude AI Code Assistant_`;
            
            // Post the response
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: response
            });
            
            // Update reaction to show completion
            if (context.eventName !== 'issues') {
              const commentId = context.payload.comment?.id;
              if (commentId) {
                // Remove processing reaction
                try {
                  await github.rest.reactions.deleteForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: commentId,
                    reaction_id: 'rocket'
                  });
                } catch (e) {
                  // Ignore if reaction doesn't exist
                }
                
                // Add completion reaction
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: commentId,
                  content: 'heart'
                });
              }
            }
