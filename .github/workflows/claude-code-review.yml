name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    paths-ignore:
      - '.ai-dr/**'
      - 'musings/**'
      - 'logs/**'
      - 'docs/**'
      - '*.md'

jobs:
  claude-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for comprehensive review

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Quality Checks
        id: quality-checks
        continue-on-error: true
        run: |
          echo "üîç Running automated code quality checks..."
          
          CHECKS_PASSED=true
          
          echo "üìã TypeScript Check:"
          if bun run typecheck; then
            echo "‚úÖ TypeScript check passed"
            echo "typecheck=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "‚ùå TypeScript errors found"
            echo "typecheck=‚ùå" >> $GITHUB_OUTPUT
            CHECKS_PASSED=false
          fi
          
          echo "üîß Linting:"
          if bun run lint; then
            echo "‚úÖ Linting passed"
            echo "lint=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Linting issues found"
            echo "lint=‚ùå" >> $GITHUB_OUTPUT
            CHECKS_PASSED=false
          fi
          
          echo "üß™ Tests:"
          if bun run test; then
            echo "‚úÖ Tests passed"
            echo "test=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Tests failed"
            echo "test=‚ùå" >> $GITHUB_OUTPUT
            CHECKS_PASSED=false
          fi
          
          echo "üì¶ Build check:"
          if bun run build; then
            echo "‚úÖ Build successful"
            echo "build=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Build failed"
            echo "build=‚ùå" >> $GITHUB_OUTPUT
            CHECKS_PASSED=false
          fi
          
          if [ "$CHECKS_PASSED" = "false" ]; then
            exit 1
          fi

      - name: Claude AI Code Review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Enable progress tracking for visual feedback
          track_progress: true
          
          # Comprehensive review prompt tailored to the monorepo
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}
            PR TITLE: ${{ github.event.pull_request.title }}
            
            Quality Check Results:
            - TypeScript: ${{ steps.quality-checks.outputs.typecheck || '‚è≥' }}
            - Linting: ${{ steps.quality-checks.outputs.lint || '‚è≥' }}
            - Tests: ${{ steps.quality-checks.outputs.test || '‚è≥' }}
            - Build: ${{ steps.quality-checks.outputs.build || '‚è≥' }}
            
            Perform a comprehensive code review for this Bun monorepo PR with focus on:
            
            ## 1. **Monorepo Structure & Organization**
               - Verify files are in appropriate packages (not in root)
               - Check package boundaries and dependencies
               - Validate Turborepo configuration if changed
               - Ensure proper workspace imports (@workspace/*)
               
            ## 2. **TypeScript & Code Quality**
               - NO `any` types allowed - suggest `unknown` or proper types
               - Verify strict mode compliance
               - Check for proper type exports and imports
               - Validate absolute imports usage
               - Ensure kebab-case naming for files/directories
               - Review function patterns (inline interfaces preferred)
               
            ## 3. **Bun-Specific Patterns**
               - Verify Bun commands used instead of npm/node
               - Check for proper .env handling (no dotenv needed)
               - Validate test patterns using Bun test runner
               - Review build configurations
               
            ## 4. **Security & Best Practices**
               - Check for hardcoded secrets or credentials
               - Verify proper environment variable usage (NEXT_PUBLIC_* for client)
               - Review input validation and sanitization
               - Check error handling patterns
               - Validate path security (prevent directory traversal)
               
            ## 5. **Performance Considerations**
               - Review database queries (if using Prisma)
               - Check for efficient imports and code splitting
               - Identify potential memory leaks
               - Review bundle size impacts
               
            ## 6. **Testing Coverage**
               - Verify tests for new functionality
               - Check test quality and edge cases
               - Review mock usage (testing only, never production)
               - Validate test isolation with cleanupTestDb()
               
            ## 7. **Documentation**
               - Ensure README updates for new features
               - Check inline documentation quality
               - Verify CLAUDE.md updates if agent behavior changes
               - Review API documentation if endpoints added
               
            ## 8. **Database Changes (if applicable)**
               - Review Prisma schema changes
               - Check migration naming and quality
               - Validate seed data updates
               
            ## Style Guidelines to Enforce:
               - Single Responsibility Principle for files
               - Explicit exports (no barrel files)
               - Proper error messages with installation instructions
               - Comments explain "why" not "what"
               
            Provide:
            - Inline comments for specific code issues
            - General observations as top-level comments
            - Constructive feedback with suggested improvements
            - Recognition of good patterns and practices
            
            Focus on actionable feedback that improves code quality, security, and maintainability.
          
          # Tools for comprehensive PR review
          claude_args: |
            --allowed-tools "Read,Edit,Bash,Grep,WebSearch"

