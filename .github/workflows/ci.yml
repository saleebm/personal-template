name: CI

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - '.ai-dr/**'
      - 'musings/**'
      - 'logs/**'
      - '*.md'
      - 'docs/**'
      - '.github/*.md'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug logging'
        required: false
        default: false

permissions:
  contents: read
  pull-requests: write  # Required for commenting on PRs
  checks: write         # Required for creating check runs

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  # Quick validation to fail fast on obvious issues
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      should-run-full: ${{ steps.check.outputs.should-run }}
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Check for obvious issues
        id: check
        run: |
          echo "Performing quick validation checks..."
          
          # Check for package.json syntax
          for pkg in $(find . -name "package.json" -not -path "*/node_modules/*"); do
            if ! jq empty "$pkg" 2>/dev/null; then
              echo "❌ Invalid JSON in $pkg"
              exit 1
            fi
          done
          
          # Check for TypeScript syntax errors in changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
          fi
          
          echo "✅ Quick validation passed"

  # Main CI job that runs all checks
  ci:
    name: CI Pipeline
    needs: quick-check
    if: needs.quick-check.outputs.should-run-full == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        bun-version: ['1.2.21']
    
    # Add PostgreSQL service for Prisma
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # For turbo affected calculation

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ matrix.bun-version }}
      
      - name: Enable debug logging
        if: github.event.inputs.debug_enabled == 'true'
        run: |
          echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV
          echo "ACTIONS_RUNNER_DEBUG=true" >> $GITHUB_ENV

      # Cache Bun dependencies
      - name: Cache Bun modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Cache Turborepo build outputs
      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Installing dependencies"
          if ! bun install --frozen-lockfile; then
            echo "::error::Failed to install dependencies. Retrying without frozen lockfile..."
            bun install
            echo "::warning::Dependencies installed without frozen lockfile. Please update bun.lock"
          fi
          echo "::endgroup::"

      # Generate Prisma client before running checks
      - name: Generate Prisma Client
        id: prisma-generate
        run: |
          echo "::group::Generating Prisma Client"
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if bun run db:generate; then
              echo "✅ Prisma Client generated successfully"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "::warning::Prisma generation failed, retrying ($RETRY_COUNT/$MAX_RETRIES)..."
                sleep 2
              else
                echo "::error::Failed to generate Prisma Client after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          echo "::endgroup::"
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"

      # Run all checks with better error reporting
      - name: Run Type Check
        id: typecheck
        run: |
          echo "::group::TypeScript Type Checking"
          if ! bun typecheck; then
            echo "::error::TypeScript type checking failed"
            echo "### ❌ Type Check Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please run 'bun typecheck' locally to see detailed errors" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Type checking passed" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
        continue-on-error: true

      - name: Run Linter
        id: lint
        run: |
          echo "::group::ESLint Checking"
          if ! bun lint; then
            echo "::error::Linting failed"
            echo "### ❌ Linting Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please run 'bun lint' locally to fix issues" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Linting passed" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
        continue-on-error: true

      - name: Run Tests
        id: test
        run: |
          echo "::group::Running Tests"
          if ! bun test; then
            echo "::error::Tests failed"
            echo "### ❌ Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please run 'bun test' locally to debug" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
        env:
          CI: true
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
        continue-on-error: true

      - name: Build packages
        id: build
        run: |
          echo "::group::Building Packages"
          START_TIME=$(date +%s)
          
          if ! bun run build; then
            echo "::error::Build failed"
            echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          END_TIME=$(date +%s)
          BUILD_TIME=$((END_TIME - START_TIME))
          echo "✅ Build completed in ${BUILD_TIME}s" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
        continue-on-error: true
      
      # Report final status
      - name: CI Status Report
        if: always()
        run: |
          echo "## 📊 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.typecheck.outcome }}" = "success" ]; then
            echo "| Type Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Type Check | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.lint.outcome }}" = "success" ]; then
            echo "| Linting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Linting | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.test.outcome }}" = "success" ]; then
            echo "| Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Build | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail the job if any step failed
          if [ "${{ steps.typecheck.outcome }}" != "success" ] || \
             [ "${{ steps.lint.outcome }}" != "success" ] || \
             [ "${{ steps.test.outcome }}" != "success" ] || \
             [ "${{ steps.build.outcome }}" != "success" ]; then
            exit 1
          fi

  # Format check as a separate job for clarity
  format:
    name: Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Cache Bun modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-format-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-format-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check formatting
        run: bun run format:check

  # Monorepo affected check for PRs
  affected:
    name: Affected Packages Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    outputs:
      affected: ${{ steps.affected.outputs.packages }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for affected calculation

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21

      - name: Cache Bun modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-affected-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-affected-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Calculate affected packages
        id: affected
        run: |
          echo "Checking affected packages for PR..."
          # Using turbo to check what's affected (use bunx to ensure turbo is in PATH)
          bunx turbo run build --filter='...[origin/main]' --dry-run=json > affected.json || true
          
          # Extract and display affected packages
          if [ -f affected.json ]; then
            echo "Affected packages:"
            cat affected.json | jq -r '.tasks[].package' | sort -u || echo "No packages affected"
          fi

      - name: Comment affected packages on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let affectedMessage = '📦 **Affected Packages**\n\n';
            
            try {
              if (fs.existsSync('affected.json')) {
                const affected = JSON.parse(fs.readFileSync('affected.json', 'utf8'));
                const packages = [...new Set(affected.tasks?.map(t => t.package) || [])];
                
                if (packages.length > 0) {
                  affectedMessage += packages.map(p => `- ${p}`).join('\n');
                } else {
                  affectedMessage += '_No packages affected by this change_';
                }
              } else {
                affectedMessage += '_Unable to determine affected packages_';
              }
            } catch (e) {
              affectedMessage += '_Error calculating affected packages_';
            }
            
            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Affected Packages')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: affectedMessage
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: affectedMessage
              });
            }

  # Security scanning job
  security:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.21
      
      - name: Check for secrets
        run: |
          echo "::group::Scanning for hardcoded secrets"
          
          # Define patterns to check
          SECRET_PATTERNS=(
            "sk-[a-zA-Z0-9]{48}"
            "ghp_[a-zA-Z0-9]{36}"
            "ghs_[a-zA-Z0-9]{36}"
            "AKIA[0-9A-Z]{16}"
            "['\"]AIza[0-9A-Za-z-_]{35}['\"]"
          )
          
          FOUND_SECRETS=false
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r "$pattern" --exclude-dir=node_modules --exclude-dir=.git --exclude="*.lock" . 2>/dev/null; then
              echo "::error::Potential secret found matching pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          if [ "$FOUND_SECRETS" = true ]; then
            echo "❌ Potential secrets detected in code"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets detected"
          echo "::endgroup::"
      
      - name: License check
        run: |
          echo "::group::Checking license compliance"
          # Add license checking logic here when needed
          echo "✅ License check passed"
          echo "::endgroup::"